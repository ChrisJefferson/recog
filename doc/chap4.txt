  
  [1m[4m[31m4. Group Recognition[0m
  
  This  chapter describes a generic framework for group recognition. The basic
  problem  is, we want to solve the word problem: given any g in G, G = < X >,
  write  a  straight  line  program (SLP) from X to g. This is usually done by
  constructing  some  nice  generators  (and then writing an SLP from the nice
  generators  to  g  and  concatenating  with  an  SLP  from  X  to  the  nice
  generators).  Often,  for  efficiency  reasons,  we will just store the nice
  generators  and  then  only  be  interested  in the SLP from those to g. The
  framework presented here deals with exactly this process.
  
  The  generic  framework  was  designed  having  three  situations  in  mind:
  permutation  groups,  matrix  groups,  and  black  box  groups. Although the
  methods  used  are  quite different for those three cases, there is a common
  pattern  in  the  procedure  of recognition. Namely, first we have to find a
  homomorphism,  solve  the word problem recursively in image and kernel, then
  put  it  together.  The recursion ends in groups where we can solve the word
  problem  directly. The general framework reflects this idea and separates it
  from the rest of the recognition methods.
  
  Solution  of  the  word  problem  comes  in two stages: first a "recognition
  phase"  and  then  a  "verification  phase".  The  recognition phase usually
  consists   of   randomized   algorithms   with   certain  error  or  failure
  probabilities.  The  result  is  some kind of "recognition information" that
  will describe the group already very well, but which is not yet proven to be
  correct.  However,  one can already write arbitrary elements in the group as
  product of the given generators. In the verification phase a presentation of
  the  group  is  calculated,  thereby proving that the group generated by the
  given  generators  is  in  fact  isomorphic  to  the  group described by the
  recognition  information.  In many cases the verification phase will be much
  more expensive than the recognition phase.
  
  In  the following sections, we describe the generic framework. We begin with
  a technical description of the recursive procedure and describe then the way
  methods  to find homomorphism have to be implemented. After that we conclude
  this  chapter  with  three  sections  on  some  generic  conventions for the
  recognition  of  permutation  groups,  matrix  groups,  and black box groups
  respectively.
  
  
  [1m[4m[31m4.1 The recursive procedure[0m
  
  As  explained at the beginning of this section, the heart of the recognition
  procedure  is  a  function  called [1m[34mRecogniseGeneric[0m ([1m4.1-1[0m) which gets a [1mGAP[0m
  group  object  and  returns  a  so-called  "recognition  info  record"  (see
  Subsection  [1m4.2[0m  for  details). Success or failure will be indicated by this
  record being in the filter [1m[34mIsReady[0m ([1m4.2-5[0m) or not.
  
  To  know  how  to find homomorphisms the function gets as another argument a
  database  of  methods  (see  Section  [1m4.3[0m for a description of the setup for
  methods  for finding homomorphisms and Section [1m3.1[0m in Chapter [1m3.[0m for details
  about  method  databases).  This database will be different according to the
  type of group in question.
  
  To  describe  the  algorithm  executed  by [1m[34mRecogniseGeneric[0m ([1m4.1-1[0m) we first
  summarize it in steps:
  
  (1)   Create a new, empty recognition info record.
  
  (2)   Use  the database of [22m[32mFindHomomorphism[0m methods and the method selection
        procedure described in Chapter [1m3.[0m to try to find a homomorphism onto a
        smaller  group  or  an isomorphism onto another known group. Terminate
        with failure if this does not work.
  
  (3)   If  an  isomorphism  is  found or a method somehow else recognises the
        group  in  question,  such that we can write elements as straight line
        programs in the generators from now on, then make the recognition info
        record a leaf of the recognition tree and return success.
  
  (4)   Otherwise  the  function sets up all the data for the homomorphism and
        calls  itself with the image of the homomorphism. Note that this might
        use  another  database of recognition methods because the homomorphism
        might change the representation of the group.
  
  (5)   After  successful recognition of the factor group the procedure has to
        recognise  the  kernel of the homomorphism. The first step for this is
        to   find   generators.  If  they  are  not  already  known  from  the
        [22m[32mFindHomomorphism[0m method, they are created by producing random elements
        in the group, mapping them through the homomorphism, writing them as a
        straight  line  program  in  the images of the generators and applying
        this straight line program to the original generators. The quotient of
        the random element and the result of the straight line program lies in
        the kernel of the homomorphism. After creating 20 random generators of
        the kernel we assume for the moment that they generate the kernel.
  
  (6)   The  function  [1m[34mRecogniseGeneric[0m  ([1m4.1-1[0m)  can  now call itself for the
        kernel.  After  successful  recognition of the kernel all the data for
        the node is completed and success is returned.
  
  (7)   The  function  [1m[34mRecogniseGeneric[0m  ([1m4.1-1[0m) now acquires preimages of the
        nice   generators   behind  the  homomorphism  and  appends  the  nice
        generators  of  the kernel. This list of generators is now the list of
        nice generators for the current node.
  
  Note  that  with  the collected data one can write arbitrary elements of the
  group as a straight line program in the generators as follows:
  
  (1)   Map the element through the homomorphism.
  
  (2)   Write  the  element  in  the  factor  group  as  a product of the nice
        generators in the factor group.
  
  (3)   Apply  the  resulting  straight line program to the preimages of those
        nice  generators and calculate the quotient, which will now lie in the
        kernel.
  
  (4)   Write  the  kernel  element  as  a straight line program in the kernel
        generators.
  
  (5)   Assemble  both  straight  line  programs  to  one bigger straight line
        program  (which is now in terms of our own nice generators) and return
        it.
  
  If  this  procedure fails in the fourth step, this indicates that our random
  generators  for  the  kernel  did not yet generate the full kernel and makes
  further recognition steps necessary. This will not happen after a successful
  verification phase.
  
  The  latter  procedure  to  write  elements as straight line programs in the
  generators is implemented in the function [1m[34mSLPforElementGeneric[0m ([1m4.3-2[0m) which
  will  be  called  automatically  if  one  calls  the  [1m[34mSLPforElement[0m ([1m4.2-15[0m)
  function  of  the  resulting  recognition  info  record  (see  [1m[34mslpforelement[0m
  ([1m4.2-14[0m)).
  
  It  is  now  high time to give you the calling details of the main recursive
  recognition function:
  
  [1m[4m[31m4.1-1 RecogniseGeneric[0m
  
  [1m[34m> RecogniseGeneric( [0m[22m[34mH, methoddb, depth[, knowledge][0m[1m[34m ) ______________[0mfunction
  [1m[34m> RecognizeGeneric( [0m[22m[34mH, methoddb, depth[, knowledge][0m[1m[34m ) ______________[0mfunction
  [1mReturns:[0m  [22m[32mfail[0m for failure or a recognition info record.
  
  [22m[34mH[0m  must  be  a  [1mGAP[0m  group object, [22m[34mmethoddb[0m must be a method database in the
  sense  of  Section  [1m3.1[0m  containing [22m[32mFindHomomorphism[0m methods in the sense of
  Section [1m4.3[0m. [22m[34mdepth[0m is an integer which measures the depth in the recognition
  tree. It will be increased by one for each step we go into the tree. The top
  level  has  depth 0. [22m[34mknowledge[0m is an optional record the components of which
  are  copied  into  the  new recognition info record which is created for the
  group  [22m[34mH[0m.  Especially  the  component [22m[32mhints[0m can contain a list of additional
  find  homomorphism methods (described by records as in Section [1m3.1[0m) which is
  prepended  to the method database in [22m[34mmethoddb[0m before the recognition starts.
  This  feature  is  intended  to give hints about prior knowledge about which
  find homomorphism method might succeed.
  
  The  function performs the algorithm described above and returns either [22m[32mfail[0m
  in  case of failure or a recognition info record in case of success. For the
  content and definition of recognition info records see Section [1m4.2[0m.
  
  The  user  will  usually  not  call this function directly, but will use the
  following convenience functions:
  
  [1m[4m[31m4.1-2 RecognisePermGroup[0m
  
  [1m[34m> RecognisePermGroup( [0m[22m[34mH[0m[1m[34m ) __________________________________________[0mfunction
  [1m[34m> RecognizePermGroup( [0m[22m[34mH[0m[1m[34m ) __________________________________________[0mfunction
  [1mReturns:[0m  [22m[32mfail[0m for failure or a recognition info record.
  
  [22m[34mH[0m   must   be   a   [1mGAP[0m   permutation  group  object.  This  function  calls
  [1m[34mRecogniseGeneric[0m  ([1m4.1-1[0m)  with  the  method  database  used for permutation
  groups, which is stored in the global variable [1m[34mFindHomDbPerm[0m ([1m4.1-6[0m), and no
  prior knowledge.
  
  [1m[4m[31m4.1-3 RecogniseMatrixGroup[0m
  
  [1m[34m> RecogniseMatrixGroup( [0m[22m[34mH[0m[1m[34m ) ________________________________________[0mfunction
  [1m[34m> RecognizeMatrixGroup( [0m[22m[34mH[0m[1m[34m ) ________________________________________[0mfunction
  [1mReturns:[0m  [22m[32mfail[0m for failure or a recognition info record.
  
  [22m[34mH[0m  must  be  a [1mGAP[0m matrix group object. This function calls [1m[34mRecogniseGeneric[0m
  ([1m4.1-1[0m)  with the method database used for matrix groups, which is stored in
  the global variable [1m[34mFindHomDbMatrix[0m ([1m4.1-9[0m), and no prior knowledge.
  
  [1m[4m[31m4.1-4 RecogniseBBGroup[0m
  
  [1m[34m> RecogniseBBGroup( [0m[22m[34mH[0m[1m[34m ) ____________________________________________[0mfunction
  [1m[34m> RecognizeBBGroup( [0m[22m[34mH[0m[1m[34m ) ____________________________________________[0mfunction
  [1mReturns:[0m  [22m[32mfail[0m for failure or a recognition info record.
  
  [22m[34mH[0m must be a [1mGAP[0m black box group object. This function calls [1m[34mRecogniseGeneric[0m
  ([1m4.1-1[0m)  with the method database used for black box groups, which is stored
  in the global variable [1m[34mFindHomDbBB[0m ([1m4.1-12[0m), and no prior knowledge.
  
  [1m[4m[31m4.1-5 RecogniseGroup[0m
  
  [1m[34m> RecogniseGroup( [0m[22m[34mH[0m[1m[34m ) ______________________________________________[0mfunction
  [1m[34m> RecognizeGroup( [0m[22m[34mH[0m[1m[34m ) ______________________________________________[0mfunction
  [1mReturns:[0m  [22m[32mfail[0m for failure or a recognition info record.
  
  [22m[34mH[0m  must be a [1mGAP[0m group object. This function automatically dispatches to one
  of    the    three    previous    functions    [1m[34mRecognisePermGroup[0m   ([1m4.1-2[0m),
  [1m[34mRecogniseMatrixGroup[0m  ([1m4.1-3[0m), or [1m[34mRecogniseBBGroup[0m ([1m4.1-4[0m), according to the
  type of the group [22m[34mH[0m.
  
  [1m[4m[31m4.1-6 FindHomDbPerm[0m
  
  [1m[34m> FindHomDbPerm______________________________________________[0mglobal variable
  
  This  list  contains  the  methods for finding homomorphisms for permutation
  group  recognition that are stored in the record [1m[34mFindHomMethodsPerm[0m ([1m4.1-7[0m).
  As  described  in Section [1m3.1[0m each method is described by a record. The list
  is  always  sorted  with respect to decreasing ranks. The order in this list
  tells in which order the methods should be applied. Use [1m[34mAddMethod[0m ([1m3.1-1[0m) to
  add methods to this database.
  
  [1m[4m[31m4.1-7 FindHomMethodsPerm[0m
  
  [1m[34m> FindHomMethodsPerm_________________________________________[0mglobal variable
  
  In   this   global  record  the  functions  that  are  methods  for  finding
  homomorphisms  for permutation group recognition are stored. We collect them
  all  in  this  record  such  that  we do not use up too many global variable
  names.
  
  [1m[4m[31m4.1-8 SLPforElementFuncsPerm[0m
  
  [1m[34m> SLPforElementFuncsPerm_____________________________________[0mglobal variable
  
  This  global  record  holds the functions that are methods for writing group
  elements  as  straight line programs (SLPs) in terms of the generators after
  successful permutation group recognition. We collect them all in this record
  such that we do not use up too many global variable names.
  
  [1m[4m[31m4.1-9 FindHomDbMatrix[0m
  
  [1m[34m> FindHomDbMatrix____________________________________________[0mglobal variable
  
  This  list  contains  the methods for finding homomorphisms for matrix group
  recognition  that are stored in the record [1m[34mFindHomMethodsMatrix[0m ([1m4.1-10[0m). As
  described  in  Section [1m3.1[0m each method is described by a record. The list is
  always sorted with respect to decreasing ranks. The order in this list tells
  in  which  order the methods should be applied. Use [1m[34mAddMethod[0m ([1m3.1-1[0m) to add
  methods to this database.
  
  [1m[4m[31m4.1-10 FindHomMethodsMatrix[0m
  
  [1m[34m> FindHomMethodsMatrix_______________________________________[0mglobal variable
  
  In   this   global  record  the  functions  that  are  methods  for  finding
  homomorphisms  for  matrix group recognition are stored. We collect them all
  in this record such that we do not use up too many global variable names.
  
  [1m[4m[31m4.1-11 SLPforElementFuncsMatrix[0m
  
  [1m[34m> SLPforElementFuncsMatrix___________________________________[0mglobal variable
  
  This  global  record  holds the functions that are methods for writing group
  elements  as  straight line programs (SLPs) in terms of the generators after
  successful matrix group recognition. We collect them all in this record such
  that we do not use up too many global variable names.
  
  [1m[4m[31m4.1-12 FindHomDbBB[0m
  
  [1m[34m> FindHomDbBB________________________________________________[0mglobal variable
  
  This list contains the methods for finding homomorphisms for black box group
  recognition  that  are  stored  in  the record [1m[34mFindHomMethodsBB[0m ([1m4.1-13[0m). As
  described  in  Section [1m3.1[0m each method is described by a record. The list is
  always sorted with respect to decreasing ranks. The order in this list tells
  in  which  order the methods should be applied. Use [1m[34mAddMethod[0m ([1m3.1-1[0m) to add
  methods to this database.
  
  [1m[4m[31m4.1-13 FindHomMethodsBB[0m
  
  [1m[34m> FindHomMethodsBB___________________________________________[0mglobal variable
  
  In   this   global  record  the  functions  that  are  methods  for  finding
  homomorphisms  for  black  box group recognition are stored. We collect them
  all  in  this  record  such  that  we do not use up too many global variable
  names.
  
  [1m[4m[31m4.1-14 SLPforElementFuncsBB[0m
  
  [1m[34m> SLPforElementFuncsBB_______________________________________[0mglobal variable
  
  This  global  record  holds the functions that are methods for writing group
  elements  as  straight line programs (SLPs) in terms of the generators after
  successful  black  box group recognition. We collect them all in this record
  such that we do not use up too many global variable names.
  
  
  [1m[4m[31m4.2 Recognition info records[0m
  
  A  recognition info record is a [1mGAP[0m positional object. It is a member of the
  family
  
  [1m[4m[31m4.2-1 RecognitionInfoFamily[0m
  
  [1m[34m> RecognitionInfoFamily_______________________________________________[0mfamily
  and is in the category
  
  [1m[4m[31m4.2-2 IsRecognitionInfo[0m
  
  [1m[34m> IsRecognitionInfo_________________________________________________[0mCategory
  and  is  [1m[34mIsAttributeStoringRep[0m  ([1mPrg  Tutorial: IsAttributeStoringRep[0m), such
  that  we  can  define attributes for it, the values of which are stored once
  they  are  known. A recognition info record always represents a whole binary
  tree of such records, see the attributes [1m[34mfactor[0m ([1m4.2-10[0m) and [1m[34mkernel[0m ([1m4.2-11[0m)
  below.
  
  The following filters are defined for recognition info records:
  
  [1m[4m[31m4.2-3 IsLeaf[0m
  
  [1m[34m> IsLeaf________________________________________________________________[0mFlag
  
  This  flag  indicates, whether or not a recognition info record represents a
  leaf  in  the  recognition tree. If it is not set, one finds at least one of
  the attributes [1m[34mfactor[0m ([1m4.2-10[0m) and [1m[34mkernel[0m ([1m4.2-11[0m) set for the corresponding
  node.  This  flag is normally reset and has to be set by a find homomorphism
  method to indicate a leaf.
  
  [1m[4m[31m4.2-4 DoNotRecurse[0m
  
  [1m[34m> DoNotRecurse__________________________________________________________[0mFlag
  
  This  flag  can  be  set  by a find homomorphism method to indicate that the
  generic  recursive  procedure  should  not recurse further down, even if the
  corresponding  node is not a leaf. It is then the responsibility of the find
  homomorphism method to complete the tree below.
  
  [1m[4m[31m4.2-5 IsReady[0m
  
  [1m[34m> IsReady_______________________________________________________________[0mFlag
  
  This  flag indicates during the recognition procedure, whether a node in the
  recognition tree is already completed or not. It is mainly set for debugging
  purposes during the recognition. However, if the recognition fails somewhere
  in  a leaf, this flag is not set and all nodes above will also not have this
  flag  set.  In this way one can see whether the recognition failed and where
  the  problem was. If a find homomorphism method uses [1m[34mDoNotRecurse[0m ([1m4.2-4[0m) to
  avoid  further  recursion  it  acquires  thereby  responsibility  to set the
  [1m[34mIsReady[0m flag in the corresponding subtree upon completion.
  
  The following attributes are defined for recognition info records:
  
  [1m[4m[31m4.2-6 group[0m
  
  [1m[34m> group( [0m[22m[34mri[0m[1m[34m ) _____________________________________________________[0mattribute
  
  The  value  of  this attribute is the group that is to be recognised by this
  recognition  info  record  [22m[34mri[0m.  This  attribute  is  always  present  during
  recognition  and  after  completion.  Note  that the generators of the group
  object stored here always have a memory attached to them, such that elements
  that are generated from them remember, how they were acquired.
  
  [1m[4m[31m4.2-7 homom[0m
  
  [1m[34m> homom( [0m[22m[34mri[0m[1m[34m ) _____________________________________________________[0mattribute
  
  The  value  of  this  attribute  is the homomorphism that was found from the
  group described by the recognition info record [22m[34mri[0m as a [1mGAP[0m object. It is set
  by  a  find  homomorphism  method  that succeeded to find a homomorphism (or
  isomorphism).  It  does  not have to be set in leaf nodes of the recognition
  tree.
  
  [1m[4m[31m4.2-8 nicegens[0m
  
  [1m[34m> nicegens( [0m[22m[34mri[0m[1m[34m ) __________________________________________________[0mattribute
  
  The  value of this attribute must be set for all nodes and contains the nice
  generators.  The  [1m[34mSLPforElement[0m ([1m4.2-15[0m) function of the node will write its
  straight line program in terms of these nice generators. For leaf nodes, the
  find  homomorphism  method  is  responsible to set the value of [1m[34mnicegens[0m. By
  default,  the original generators of the group at this node are taken. For a
  homomorphism  (or  isomorphism),  the  [1m[34mnicegens[0m will be the concatenation of
  preimages  of  the [1m[34mnicegens[0m of the factor group (see [1m[34mpregensfac[0m ([1m4.2-9[0m)) and
  the  [1m[34mnicegens[0m of the kernel. A find homomorphism method does not have to set
  [1m[34mnicegens[0m  if  it  finds  a  homomorphism.  Note  however,  that  such a find
  homomorphism method has to ensure somehow, that preimages of the [1m[34mnicegens[0m of
  the  factor  group  can be acquired. See [1m[34mcalcnicegens[0m ([1m4.2-18[0m), [1m[34mCalcNiceGens[0m
  ([1m4.2-21[0m) and [1m[34mslptonice[0m ([1m4.2-22[0m) for instructions.
  
  [1m[4m[31m4.2-9 pregensfac[0m
  
  [1m[34m> pregensfac( [0m[22m[34mri[0m[1m[34m ) ________________________________________________[0mattribute
  
  The value of this attribute is only set for homomorphism nodes. In that case
  it  contains  preimages  of  the  nice  generators in the factor group. This
  attribute is set automatically by the generic recursive recognition function
  using  the  mechanism  described  with  the  attribute [1m[34mcalcnicegens[0m ([1m4.2-18[0m)
  below. A find homomorphism does not have to touch this attribute.
  
  [1m[4m[31m4.2-10 factor[0m
  
  [1m[34m> factor( [0m[22m[34mri[0m[1m[34m ) ____________________________________________________[0mattribute
  
  The  value  of this attribute is the recognition info record of the image of
  the  homomorphism that was found from the group described by the recognition
  info  record  [22m[34mri[0m.  It is set by the generic recursive procedure after a find
  homomorphism  method  has succeeded to find a homomorphism (or isomorphism).
  It  does  not  have  to  be  set in leaf nodes of the recognition tree. This
  attribute value provides the link to the "factor" subtree of the recognition
  tree.
  
  [1m[4m[31m4.2-11 kernel[0m
  
  [1m[34m> kernel( [0m[22m[34mri[0m[1m[34m ) ____________________________________________________[0mattribute
  
  The  value of this attribute is the recognition info record of the kernel of
  the  homomorphism that was found from the group described by the recognition
  info  record  [22m[34mri[0m.  It is set by the generic recursive procedure after a find
  homomorphism  method  has succeeded to find a homomorphism (or isomorphism).
  It  does  not have to be set in leaf nodes of the recognition tree or if the
  homomorphism  is known to be an isomorphism. In the latter case the value of
  the  attribute is set to [22m[32mfail[0m. This attribute value provides the link to the
  "kernel" subtree of the recognition tree.
  
  [1m[4m[31m4.2-12 parent[0m
  
  [1m[34m> parent( [0m[22m[34mri[0m[1m[34m ) ____________________________________________________[0mattribute
  
  The  value of this attribute is the recognition info record of the parent of
  this node in the recognition tree. The top node does not have this attribute
  set.
  
  [1m[4m[31m4.2-13 fhmethsel[0m
  
  [1m[34m> fhmethsel( [0m[22m[34mri[0m[1m[34m ) _________________________________________________[0mattribute
  
  The  value  of this attribute is the record returned by the method selection
  (see  Section  [1m3.2[0m) after it ran to find a homomorphism (or isomorphism). It
  is there to be able to see which methods were tried until the recognition of
  the node was completed.
  
  [1m[4m[31m4.2-14 slpforelement[0m
  
  [1m[34m> slpforelement( [0m[22m[34mri[0m[1m[34m ) _____________________________________________[0mattribute
  
  After  the  recognition  phase  is  completed  for  the  node  [22m[34mri[0m, we are by
  definition  able  to write arbitrary elements in the group described by this
  node as a straight line program (SLP) in terms of the nice generators stored
  in  [1m[34mnicegens[0m  ([1m4.2-8[0m). This attribute value is a function taking the node [22m[34mri[0m
  and  a  group  element  as  its  arguments and returning the above mentioned
  straight line program. For the case that a find homomorphism method succeeds
  in  finding  a  homomorphism,  the  generic  recursive  function  sets  this
  attribute  to  the  function [1m[34mSLPforElementGeneric[0m ([1m4.3-2[0m) which does the job
  for  the  generic  homomorphism situation. In all other cases the successful
  find  homomorphism  method has to set this attribute to a function doing the
  job.  The  find  homomorphism method is free to store additional data in the
  recognition  info  record  or  the  group object such that the [1m[34mSLPforElement[0m
  ([1m4.2-15[0m) function can work.
  
  [1m[4m[31m4.2-15 SLPforElement[0m
  
  [1m[34m> SLPforElement( [0m[22m[34mri, x[0m[1m[34m ) ___________________________________________[0mfunction
  [1mReturns:[0m  a straight line program expressing [22m[34mx[0m in the nice generators.
  
  This  is  a  wrapper  function  which  extracts  the  value of the attribute
  [1m[34mslpforelement[0m ([1m4.2-14[0m) and calls that function with the arguments [22m[34mri[0m and [22m[34mx[0m.
  
  [1m[4m[31m4.2-16 presentation[0m
  
  [1m[34m> presentation( [0m[22m[34mri[0m[1m[34m ) ______________________________________________[0mattribute
  
  After  the verification phase, the presentation is stored here. Details have
  still to be decided upon.
  
  [1m[4m[31m4.2-17 methodsforfactor[0m
  
  [1m[34m> methodsforfactor( [0m[22m[34mri[0m[1m[34m ) __________________________________________[0mattribute
  
  This  attribute is initialized at the beginning of the recursive recognition
  function  with  the  database  of find homomorphism methods that was used to
  recognise  the group corresponding to the recognition info record [22m[34mri[0m. If the
  found  homomorphism  changes  the  representation  of  the  group (going for
  example  from  a matrix group to a permutation group), the find homomorphism
  method  can  report  this  by  exchanging  the database of find homomorphism
  methods  to  be  used in the recognition of the image of the homomorphism by
  setting  the  value of this attribute to something different. It lies in the
  responsibility   of   the   find  homomorphism  method  to  do  so,  if  the
  representation changes through the homomorphism.
  
  The  following  two  attributes  are concerned with the relation between the
  original  generators  and  the  nice generators for a node. They are used to
  transport  this information from a successful find homomorphism method up to
  the recursive recognition function:
  
  [1m[4m[31m4.2-18 calcnicegens[0m
  
  [1m[34m> calcnicegens( [0m[22m[34mri[0m[1m[34m ) ______________________________________________[0mattribute
  
  To  make  the  recursion  work,  we  have  to  acquire preimages of the nice
  generators  in  factor  groups  under the homomorphism found. But we want to
  keep  the  information,  how  the nice generators were found, locally at the
  node  where they were found. This attribute solves this problem of acquiring
  preimages  in  the  following  way: Its value must be a function, taking the
  recognition  info  record  [22m[34mri[0m  as  first  argument,  and  a list [22m[34moriggens[0m of
  preimages  of the original generators of the current node, and has to return
  corresponding  preimages  of  the  nice generators. Usually this task can be
  done by storing a straight line program writing the nice generators in terms
  of  the  original  generators  and  executing  this  with  inputs  [22m[34moriggens[0m.
  Therefore   the   default   value   of   this   attribute  is  the  function
  [1m[34mCalcNiceGensGeneric[0m ([1m4.2-19[0m) described below.
  
  [1m[4m[31m4.2-19 CalcNiceGensGeneric[0m
  
  [1m[34m> CalcNiceGensGeneric( [0m[22m[34mri, origgens[0m[1m[34m ) ______________________________[0mfunction
  [1mReturns:[0m  a list of preimages of the nice generators
  
  This  is  the default function for leaf nodes for the attribute [1m[34mcalcnicegens[0m
  ([1m4.2-18[0m)  described  above.  It  does  the  following:  If  the value of the
  attribute [1m[34mslptonice[0m ([1m4.2-22[0m) is set, then it must be a straight line program
  expressing  the  nice generators in terms of the original generators of this
  node.  In that case, this straight line program is executed with [22m[34moriggens[0m as
  inputs  and  the  result is returned. Otherwise, [22m[34moriggens[0m is returned as is.
  Therefore  a  leaf  node  just  has to to nothing if the nice generators are
  equal  to the original generators and just can store the right straight line
  program into the attribute [1m[34mslptonice[0m ([1m4.2-22[0m) to fulfill its duties.
  
  [1m[4m[31m4.2-20 CalcNiceGensHomNode[0m
  
  [1m[34m> CalcNiceGensHomNode( [0m[22m[34mri, origgens[0m[1m[34m ) ______________________________[0mfunction
  [1mReturns:[0m  a list of preimages of the nice generators
  
  This  is  the  default  function  for  homomorphism  node  for the attribute
  [1m[34mcalcnicegens[0m  ([1m4.2-18[0m).  It  just  delegates  to  factor  and  kernel of the
  homomorphism, as the nice generators of a homomorphism (or isomorphism) node
  are  just  the  concatenation  of  the nice generators of the factor and the
  kernel.  A  find  homomorphism  method finding a homomorphism or isomorphism
  does not have to do anything with respect to nice generators.
  
  [1m[4m[31m4.2-21 CalcNiceGens[0m
  
  [1m[34m> CalcNiceGens( [0m[22m[34mri, origgens[0m[1m[34m ) _____________________________________[0mfunction
  [1mReturns:[0m  a list of preimages of the nice generators
  
  This  is  a  wrapper  function  which  extracts  the  value of the attribute
  [1m[34mcalcnicegens[0m  ([1m4.2-18[0m)  and  calls  that  function with the arguments [22m[34mri[0m and
  [22m[34moriggens[0m.
  
  [1m[4m[31m4.2-22 slptonice[0m
  
  [1m[34m> slptonice( [0m[22m[34mri[0m[1m[34m ) _________________________________________________[0mattribute
  
  As  described  above,  the  value,  if  set, must be a straight line program
  expressing  the  nice  generators  at  this  node  in  terms of the original
  generators.  This is for leaf nodes, that choose to use the default function
  [1m[34mCalcNiceGensGeneric[0m   ([1m4.2-19[0m)   installed   in  the  [1m[34mcalcnicegens[0m  ([1m4.2-18[0m)
  attribute.
  
  The  following three attributes are concerned with the administration of the
  kernel of a found homomorphism. Find homomorphism methods use them to report
  to the main recursive recognition function their knowledge about the kernel:
  
  [1m[4m[31m4.2-23 gensN[0m
  
  [1m[34m> gensN( [0m[22m[34mri[0m[1m[34m ) _____________________________________________________[0mattribute
  
  The value of this mutable attribute is a list of generators of the kernel of
  the  homomorphism  found  at the node [22m[34mri[0m. It is initialized as an empty list
  when the recursive recognition function starts. Successful find homomorphism
  methods  may  append generators of the kernel to this list if they happen to
  stumble   on  them.  After  successful  recognition  of  the  image  of  the
  homomorphism  the  main  recursive recognition function will try to create a
  few  more  generators of the kernel and append them to the list which is the
  value  of  the  attribute [1m[34mgensN[0m. The exact behaviour depends on the value of
  the  attribute  [1m[34mfindgensNmeth[0m  ([1m4.2-24[0m)  below. The list of generators after
  that step is used to recognise the kernel. Note that the generators in [1m[34mgensN[0m
  have  a  memory  attached  to  them,  how they were obtained in terms of the
  original generators of the current node.
  
  [1m[4m[31m4.2-24 findgensNmeth[0m
  
  [1m[34m> findgensNmeth( [0m[22m[34mri[0m[1m[34m ) _____________________________________________[0mattribute
  
  This  attribute  decides  about  how  generators  of  the  kernel of a found
  homomorphism  are  produced.  Its value has to be a record with at least two
  components bound. The first is [22m[32mmethod[0m which holds a function taking at least
  one  argument [22m[34mri[0m and possibly more, and does not return anything. The second
  is  [22m[32margs[0m  which  holds a list of arguments for the above mentioned function.
  The  real  list  of  arguments is derived by prepending the recognition info
  record to the list of arguments in [22m[32margs[0m. That is, the following code is used
  to call the method:
  
  [22m[35m------------------------------------------------------------------[0m
    [22m[35m    methgensN := findmethgensN(ri);[0m
    [22m[35m    CallFuncList(methgensN(ri).method,Concatenation([ri],methgensN.args));[0m
  [22m[35m------------------------------------------------------------------[0m
  
  The  record  is  initialised upon creation of the recognition info record to
  calling  [1m[34mFindKernelRandom[0m  ([1m4.2-25[0m)  with one argument of 20 (in addition to
  the  first  argument  [22m[34mri[0m).  See  below  for a choice of possible find kernel
  methods.
  
  [1m[4m[31m4.2-25 FindKernelRandom[0m
  
  [1m[34m> FindKernelRandom( [0m[22m[34mri, n[0m[1m[34m ) ________________________________________[0mfunction
  [1mReturns:[0m  nothing
  
  [22m[34mn[0m random elements are generated, mapped through the homomorphism, written as
  a straight line program in the generators. Then the straight line program is
  executed with the original generators thereby producing elements in the same
  coset. The quotients are then elements of the kernel.
  
  [1m[4m[31m4.2-26 FindKernelDoNothing[0m
  
  [1m[34m> FindKernelDoNothing( [0m[22m[34mri, n[0m[1m[34m ) _____________________________________[0mfunction
  [1mReturns:[0m  nothing
  
  Does  nothing.  This  function is intended to be set as method for producing
  kernel  elements  if the kernel is known to be trivial or if one knows, that
  the  attribute  [1m[34mgensN[0m ([1m4.2-23[0m) already contains a complete set of generators
  for the kernel.
  
  [1m[4m[31m4.2-27 FindKernelFastNormalClosure[0m
  
  [1m[34m> FindKernelFastNormalClosure( [0m[22m[34mri, nr[0m[1m[34m ) ____________________________[0mfunction
  [1mReturns:[0m  a probable generating set for the normal closure
  
  This function takes the group G in the [1m[34mgroup[0m ([1m4.2-6[0m) attribute in [22m[34mri[0m and the
  list  of  generators  gens  of the kernel in [1m[34mgensN[0m ([1m4.2-23[0m) and the positive
  integer  [22m[34mnr[0m.  This function computes a probable generating set of the normal
  closure  in  [22m[34mG[0m of the group generated by the generators in [22m[34mgens[0m. The integer
  [22m[34mnr[0m indicates how hard it should try.
  
  [1m[4m[31m4.2-28 gensNslp[0m
  
  [1m[34m> gensNslp( [0m[22m[34mri[0m[1m[34m ) __________________________________________________[0mattribute
  
  The  recursive  recognition function calculates a straight line program that
  computes  the  generators of the kernel stored in [1m[34mgensN[0m ([1m4.2-23[0m) in terms of
  the  generators of the group recognised by [22m[34mri[0m. This straight line program is
  stored  in  the  value  of this mutable attribute. It is used by the generic
  function [1m[34mSLPforElementGeneric[0m ([1m4.3-2[0m).
  
  [1m[4m[31m4.2-29 immediateverification[0m
  
  [1m[34m> immediateverification( [0m[22m[34mri[0m[1m[34m ) _____________________________________[0mattribute
  
  Sometimes  a  find homomorphism has information that it will be difficult to
  create generators for the kernel, for example if it is known that the kernel
  will  need  lots of generators. In that case this attribute with the default
  boolean  value [22m[32mfalse[0m can be set to [22m[32mtrue[0m. In that case, the generic recursive
  recognition  function will perform an immediate verification phase after the
  kernel  has  been recognised. This is done as follows: A few random elements
  are  created,  mapped  through the homomorphism and written as an SLP in the
  nice  generators  there.  Then  this SLP is executed with preimages of those
  nice  generators.  The quotient lies then in the kernel and is written as an
  SLP  in  terms of the nice generators of the would be kernel. If this is not
  possible,  then  probably the creation of kernel generators was not complete
  and  a  few  more kernel elements are produced and recognition in the kernel
  starts all over again. This is for example done in case of the "Imprimitive"
  method  which  maps  onto  the  action  on a block system. In that case, the
  kernel often needs lots of generators.
  
  The  following  attributes  are  used to give a successful find homomorphism
  method   further  possibilities  to  transport  knowledge  about  the  group
  recognised by the current recognition info record to the factor or kernel of
  the found homomorphism:
  
  [1m[4m[31m4.2-30 forkernel[0m
  
  [1m[34m> forkernel( [0m[22m[34mri[0m[1m[34m ) _________________________________________________[0mattribute
  
  This  attribute  is  initialised  to  a record with only the component [22m[32mhints[0m
  bound  to  an  empty  list  at  the  beginning  of the recursive recognition
  function.  Find  homomorphism  methods  can put acquired knowledge about the
  group  to  be recognised (like for example an invariant subspace of a matrix
  group)  into  this record. When a homomorphism is found and recognition goes
  on  in  its  kernel,  the value of this attribute is taken as initialisation
  data  for  the  newly  created recognition info record for the kernel. Thus,
  information  is  transported down to the recognition process for the kernel.
  The  component  [22m[32mhints[0m  is  special  insofar  as  it  has  to contain records
  describing find homomorphism methods which might be particularly successful.
  They  are  prepended to the find homomorphism method database such that they
  are  called  before  any other methods. This is a means to give hints to the
  recognition  procedure  in the kernel, because often during the finding of a
  homomorphism  knowledge  is acquired which might help the recognition of the
  kernel.
  
  [1m[4m[31m4.2-31 forfactor[0m
  
  [1m[34m> forfactor( [0m[22m[34mri[0m[1m[34m ) _________________________________________________[0mattribute
  
  This  attribute  is  initialised  to  a record with only the component [22m[32mhints[0m
  bound  to  an  empty  list  at  the  beginning  of the recursive recognition
  function.  Find  homomorphism  methods  can put acquired knowledge about the
  group  to  be recognised (like for example an invariant subspace of a matrix
  group)  into  this record. When a homomorphism is found and recognition goes
  on in its image, the value of this attribute is taken as initialisation data
  for  the  newly  created  recognition  info  record  for  the  factor. Thus,
  information  is  transported down to the recognition process for the factor.
  The  component  [22m[32mhints[0m  is  special  insofar  as  it  has  to contain records
  describing find homomorphism methods which might be particularly successful.
  They  are  prepended to the find homomorphism method database such that they
  are  called  before  any other methods. This is a means to give hints to the
  recognition  procedure  in the factor, because often during the finding of a
  homomorphism  knowledge  is acquired which might help the recognition of the
  factor.
  
  
  [1m[4m[31m4.3 Methods to find homomorphisms[0m
  
  A  "find  homomorphism  method"  has the objective to find, given a group G,
  either a homomorphism from G onto a group, or an isomorphism, or to fail.
  
  In  case a homomorphism is found, it has to report that homomorphism back to
  the calling recursive recognition function together with as much information
  about the kernel as possible.
  
  If  a  find  homomorphism  method  determines that the node is a leaf in the
  recognition  tree,  then  it  has  to ensure, that arbitrary elements can be
  written  in terms of the nice generators of G (solving the word problem). It
  does  so by returning a function together with possible extra data, that can
  perform this job.
  
  Of  course,  the  find  homomorphism method also has to report, how the nice
  generators were acquired in terms of the original generators.
  
  If  the  find  homomorphism  method  fails, it has to report, whether it has
  failed  forever  or  if  it  possibly makes sense to try to call this method
  again later.
  
  Find  homomorphism  methods  have  to  fit  into  the  framework  for method
  selection  described  in  Chapter [1m3.[0m. We now begin to describe the technical
  details  of  how a find homomorphism method has to look like and what it has
  to  do  and  what  it  is  not  allowed  to do. We first explain the calling
  convention by means of a hypothetical function:
  
  [1m[4m[31m4.3-1 FindHomomorphism[0m
  
  [1m[34m> FindHomomorphism( [0m[22m[34mri, G[0m[1m[34m ) ________________________________________[0mfunction
  [1mReturns:[0m  One of the values [22m[32mtrue[0m, [22m[32mfalse[0m, [22m[32mfail[0m, or [22m[32mNotApplicable[0m.
  
  Find  homomorphism  methods  take  two  arguments [22m[34mri[0m and [22m[34mG[0m, of which [22m[34mri[0m is a
  recognition info record and [22m[34mG[0m is a [1mGAP[0m group object. The return value is one
  of  the four possible values in the framework for method selection described
  in Chapter [1m3.[0m indicating success, failure, or (temporary) non-applicability.
  The  above  mentioned  additional  information  in  case  of success are all
  returned  by  changing  the  recognition info record [22m[34mri[0m. For the conventions
  about what a find homomorphism method has to do and return see below.
  
  A  failed or not applicable find homomorphism method does not have to report
  or  do  anything  in the recognition info record [22m[34mri[0m. However, it can collect
  information  and  store  it either in the group object or in the recognition
  info  record.  Note  that  for  example  it  might  be  that  a  failed find
  homomorphism method acquires additional information that allows another find
  homomorphism method to become applicable.
  
  A  not  applicable  find  homomorphism  method should find out so relatively
  quickly, because otherwise the whole process might be slowed down, because a
  find homomorphism method repeatedly ponders about its applicability. Usually
  no big calculations should be triggered just to decide applicability.
  
  A successful find homomorphism method has the following duties:
  
  [1m[33mfor leaves:[0m
        First  it  has  to report whether the current node is a leaf or not in
        the recognition tree. That is, in case a leaf was found the method has
        to  do  [22m[32mSetFilterObj(ri,IsLeaf);[0m  thereby  setting  the [1m[34mIsLeaf[0m ([1m4.2-3[0m)
        flag.
  
        If  the  method  for  some reason chooses to finish the tree below the
        current  node  on its own, it can set the flag [1m[34mDoNotRecurse[0m ([1m4.2-4[0m) to
        indicate that no further action is required by the generic recognition
        function.  The  method  is  then responsible for correctly setting the
        [1m[34mIsLeaf[0m ([1m4.2-3[0m) and [1m[34mIsReady[0m ([1m4.2-5[0m) flags in the whole subtree.
  
        A  method finding a homomorphism which is not an isomorphism indicates
        so by not touching the flags.
  
  [1m[33mfor leaves: [1m[34mSLPforElement[0m ([1m4.2-15[0m) function[0m
        If  a  find homomorphism method has produced a leaf in the recognition
        tree  or has set the [1m[34mDoNotRecurse[0m ([1m4.2-4[0m) flag, then it has to set the
        attribute     [1m[34mslpforelement[0m    ([1m4.2-14[0m)    to    a    function    like
        [1m[34mSLPforElementGeneric[0m  ([1m4.3-2[0m) that can write an arbitrary element in [22m[34mG[0m
        as a straight line program in the nice generators of [22m[34mG[0m. The method may
        store  additional  data  into  the recognition info record for this to
        work. It does not have to set any other value in [22m[34mri[0m.
  
  [1m[33mfor leaves: information about nice generators[0m
        If  a  find homomorphism method has produced a leaf in the recognition
        tree,  then it has to report what are the nice generators of the group
        described  by  the  leaf.  To  this  end,  it has three possibilities:
        Firstly  to  do nothing, which means, that the original generators are
        the  nice  generators.  Secondly  to  store  a  straight  line program
        expressing  the  nice  generators  in terms of the original generators
        into the attribute [1m[34mslptonice[0m ([1m4.2-22[0m). In that case, the generic frame
        work  takes  care  of  the  rest.  The third possibility is to store a
        function  into  the value of the attribute [1m[34mcalcnicegens[0m ([1m4.2-18[0m) which
        can  calculate  preimages of the nice generators in terms of preimages
        of  the  original  generators.  See  the  function [1m[34mCalcNiceGensGeneric[0m
        ([1m4.2-19[0m) for an example of such a function.
  
  [1m[33mfor non-leaves: the homomorphism itself[0m
        If  a  find  homomorphism  method  has found a homomorphism, it has to
        store it as a [1mGAP[0m homomorphism object from [22m[34mG[0m to the image group in the
        attribute  [1m[34mhomom[0m  ([1m4.2-7[0m).  Note that if your homomorphism changes the
        representation  (for  example  going from matrix groups to permutation
        groups),  you will have to set the attribute [1m[34mmethodsforfactor[0m ([1m4.2-17[0m)
        accordingly.
  
  [1m[33mfor non-leaves: kernel generators[0m
        If  a  find  homomorphism  method  has found a homomorphism, it has to
        provide information about already known generators of the kernel. This
        is  done  firstly  by  appending known generators of the kernel to the
        attribute  value of [1m[34mgensN[0m ([1m4.2-23[0m) and secondly by leaving or changing
        the attribute [1m[34mfindgensNmeth[0m ([1m4.2-24[0m) to a record describing the method
        that  should  be  used (for details see [1m[34mfindgensNmeth[0m ([1m4.2-24[0m). If one
        does  not change the default value, the recursive recognition function
        will generate 20 random elements in [22m[34mG[0m and produce random generators of
        the   kernel  by  dividing  up  a  preimage  of  an  image  under  the
        homomorphism.  Note  that  generators in [1m[34mgensN[0m ([1m4.2-23[0m) have to have a
        memory  attached  to them that stores, how they were acquired from the
        generators of [22m[34mG[0m.
  
  [1m[33madditional information[0m
        A  find  homomorphism  method  may  store any data into the attributes
        [1m[34mforkernel[0m  ([1m4.2-30[0m)  and  [1m[34mforfactor[0m  ([1m4.2-31[0m), which both are records.
        Components  in these record that are bound during the recognition will
        be  copied  into  the recognition info record of the kernel and factor
        respectively  of  a  found  homomorphism  upon  creation  and thus are
        available  to  all find homomorphism methods called for the kernel and
        factor.  This  feature  might  be interesting to transport information
        that  is  relevant for the recognition of the kernel or factor and was
        acquired during the recognition of [22m[34mG[0m itself.
  
        A special role is played by the component [22m[32mhints[0m, which can hold a list
        of  records  describing  find homomorphism methods that shall be tried
        first when recognising the kernel or factor.
  
        In  addition,  a  find  homomorphism  method  might  set the attribute
        [1m[34mimmediateverification[0m ([1m4.2-29[0m) to true, if it considers the problem of
        finding kernel generators particularly difficult.
  
  To  explain the calling conventions for [1m[34mSLPforElement[0m ([1m4.2-15[0m) functions and
  for    the    sake   of   completeness   we   present   now   the   function
  [1m[34mSLPforElementGeneric[0m  ([1m4.3-2[0m)  which is used for the case of a "homomorphism
  node":
  
  [1m[4m[31m4.3-2 SLPforElementGeneric[0m
  
  [1m[34m> SLPforElementGeneric( [0m[22m[34mri, x[0m[1m[34m ) ____________________________________[0mfunction
  [1mReturns:[0m  a [1mGAP[0m straight line program
  
  This  function  takes  as arguments a recognition info record [22m[34mri[0m and a group
  element [22m[34mx[0m. It returns a [1mGAP[0m straight line program that expresses the element
  [22m[34mx[0m in terms of the nice generators of the group G recognised by [22m[34mri[0m.
  
  This  generic  function here does exactly this job for the generic situation
  that we found a homomorphism from G to some other group say H with kernel N.
  It  first  maps  [22m[34mx[0m  via  the  homomorphism  to  H  and  uses the recognition
  information  there  to  write  it as a straight line program in terms of the
  nice  generators  of  H.  Then  it applies this straight line program to the
  preimages  of those nice generators (see [1m[34mpregensfac[0m ([1m4.2-9[0m)) thereby finding
  an element y of G with x * y^-1 lying in the kernel N.
  
  Then the function writes this element as a straight line program in the nice
  generators  of N again using the recursively acquired recognition info about
  N.  In the end a concatenated straight line program for x is built, which is
  in terms of the nice generators of the current node.
  
  
  [1m[4m[31m4.4 Conventions for the recognition of permutation groups[0m
  
  None so far.
  
  
  [1m[4m[31m4.5 Conventions for the recognition of matrix groups[0m
  
  First  we  want  to  remark  that we are considering only the case of matrix
  groups over finite fields.
  
  No conventions so far.
  
  
  [1m[4m[31m4.6 Conventions for the recognition of black box groups[0m
  
  No conventions so far.
  
